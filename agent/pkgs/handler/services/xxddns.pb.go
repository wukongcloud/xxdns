// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: xxddns.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ACLS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"name"
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"name"`
	// @inject_tag: json:"country"
	Country string `protobuf:"bytes,2,opt,name=Country,proto3" json:"country"`
	// @inject_tag: json:"province"
	Province string `protobuf:"bytes,3,opt,name=Province,proto3" json:"province"`
	// @inject_tag: json:"isp"
	ISP string `protobuf:"bytes,4,opt,name=ISP,proto3" json:"isp"`
	// @inject_tag: json:"ips"
	IPS []*IP `protobuf:"bytes,5,rep,name=IPS,proto3" json:"ips"`
}

func (x *ACLS) Reset() {
	*x = ACLS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xxddns_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACLS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACLS) ProtoMessage() {}

func (x *ACLS) ProtoReflect() protoreflect.Message {
	mi := &file_xxddns_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACLS.ProtoReflect.Descriptor instead.
func (*ACLS) Descriptor() ([]byte, []int) {
	return file_xxddns_proto_rawDescGZIP(), []int{0}
}

func (x *ACLS) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ACLS) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ACLS) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ACLS) GetISP() string {
	if x != nil {
		return x.ISP
	}
	return ""
}

func (x *ACLS) GetIPS() []*IP {
	if x != nil {
		return x.IPS
	}
	return nil
}

type IP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id"
	ID int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	// @inject_tag: json:"cidr"
	CIDR string `protobuf:"bytes,2,opt,name=CIDR,proto3" json:"cidr"`
	// @inject_tag: json:"country"
	Country string `protobuf:"bytes,3,opt,name=Country,proto3" json:"country"`
	// @inject_tag: json:"province"
	Province string `protobuf:"bytes,4,opt,name=Province,proto3" json:"province"`
	// @inject_tag: json:"isp"
	ISP string `protobuf:"bytes,5,opt,name=ISP,proto3" json:"isp"`
	// @inject_tag: json:"comment"
	Comment string `protobuf:"bytes,6,opt,name=Comment,proto3" json:"comment"`
}

func (x *IP) Reset() {
	*x = IP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xxddns_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IP) ProtoMessage() {}

func (x *IP) ProtoReflect() protoreflect.Message {
	mi := &file_xxddns_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IP.ProtoReflect.Descriptor instead.
func (*IP) Descriptor() ([]byte, []int) {
	return file_xxddns_proto_rawDescGZIP(), []int{1}
}

func (x *IP) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *IP) GetCIDR() string {
	if x != nil {
		return x.CIDR
	}
	return ""
}

func (x *IP) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *IP) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *IP) GetISP() string {
	if x != nil {
		return x.ISP
	}
	return ""
}

func (x *IP) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xxddns_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_xxddns_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_xxddns_proto_rawDescGZIP(), []int{2}
}

type IsFlushed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"flushed"
	Flushed bool `protobuf:"varint,1,opt,name=Flushed,proto3" json:"flushed"`
}

func (x *IsFlushed) Reset() {
	*x = IsFlushed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xxddns_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsFlushed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsFlushed) ProtoMessage() {}

func (x *IsFlushed) ProtoReflect() protoreflect.Message {
	mi := &file_xxddns_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsFlushed.ProtoReflect.Descriptor instead.
func (*IsFlushed) Descriptor() ([]byte, []int) {
	return file_xxddns_proto_rawDescGZIP(), []int{3}
}

func (x *IsFlushed) GetFlushed() bool {
	if x != nil {
		return x.Flushed
	}
	return false
}

type DomainData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"domain"
	Domain *Domain `protobuf:"bytes,1,opt,name=Domain,proto3" json:"domain"`
	// @inject_tag: json:"records"
	Records []*Record `protobuf:"bytes,2,rep,name=Records,proto3" json:"records"`
}

func (x *DomainData) Reset() {
	*x = DomainData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xxddns_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainData) ProtoMessage() {}

func (x *DomainData) ProtoReflect() protoreflect.Message {
	mi := &file_xxddns_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainData.ProtoReflect.Descriptor instead.
func (*DomainData) Descriptor() ([]byte, []int) {
	return file_xxddns_proto_rawDescGZIP(), []int{4}
}

func (x *DomainData) GetDomain() *Domain {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *DomainData) GetRecords() []*Record {
	if x != nil {
		return x.Records
	}
	return nil
}

type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"count_list"
	ID int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"count_list"`
	// @inject_tag: json:"domain"
	Domain string `protobuf:"bytes,2,opt,name=Domain,proto3" json:"domain"`
	// @inject_tag: json:"view"
	View string `protobuf:"bytes,3,opt,name=View,proto3" json:"view"`
	// @inject_tag: json:"name"
	Name string `protobuf:"bytes,4,opt,name=Name,proto3" json:"name"`
	// @inject_tag: json:"type"
	Type string `protobuf:"bytes,5,opt,name=Type,proto3" json:"type"`
	// @inject_tag: json:"content"
	Content string `protobuf:"bytes,6,opt,name=Content,proto3" json:"content"`
	// @inject_tag: json:"ttl"
	TTL int32 `protobuf:"varint,7,opt,name=TTL,proto3" json:"ttl"`
	// @inject_tag: json:"priority"
	Priority int32 `protobuf:"varint,8,opt,name=Priority,proto3" json:"priority"`
	// @inject_tag: json:"disable"
	Disabled bool `protobuf:"varint,9,opt,name=Disabled,proto3" json:"disable"`
	// @inject_tag: json:"comment"
	Comment string `protobuf:"bytes,10,opt,name=Comment,proto3" json:"comment"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xxddns_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_xxddns_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_xxddns_proto_rawDescGZIP(), []int{5}
}

func (x *Record) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Record) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Record) GetView() string {
	if x != nil {
		return x.View
	}
	return ""
}

func (x *Record) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Record) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Record) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Record) GetTTL() int32 {
	if x != nil {
		return x.TTL
	}
	return 0
}

func (x *Record) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Record) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Record) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type Domain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id"
	ID int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	// @inject_tag: json:"name"
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	// @inject_tag: json:"type"
	Type string `protobuf:"bytes,3,opt,name=Type,proto3" json:"type"`
	// @inject_tag: json:"ttl"
	TTL int32 `protobuf:"varint,4,opt,name=TTL,proto3" json:"ttl"`
	// @inject_tag: json:"priority"
	Provider string `protobuf:"bytes,5,opt,name=Provider,proto3" json:"priority"`
	// @inject_tag: json:"contact"
	Contact string `protobuf:"bytes,6,opt,name=Contact,proto3" json:"contact"`
	// @inject_tag: json:"serial"
	Serial int32 `protobuf:"varint,7,opt,name=Serial,proto3" json:"serial"`
	// @inject_tag: json:"refresh"
	Refresh int32 `protobuf:"varint,8,opt,name=Refresh,proto3" json:"refresh"`
	// @inject_tag: json:"retry"
	Retry int32 `protobuf:"varint,9,opt,name=Retry,proto3" json:"retry"`
	// @inject_tag: json:"expire"
	Expire int32 `protobuf:"varint,10,opt,name=Expire,proto3" json:"expire"`
	// @inject_tag: json:"mini_num"
	Mininum int32 `protobuf:"varint,11,opt,name=Mininum,proto3" json:"mini_num"`
	// @inject_tag: json:"comment"
	Comment string `protobuf:"bytes,12,opt,name=Comment,proto3" json:"comment"`
	// @inject_tag: json:"disable"
	Disabled bool `protobuf:"varint,13,opt,name=Disabled,proto3" json:"disable"`
}

func (x *Domain) Reset() {
	*x = Domain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xxddns_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Domain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Domain) ProtoMessage() {}

func (x *Domain) ProtoReflect() protoreflect.Message {
	mi := &file_xxddns_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Domain.ProtoReflect.Descriptor instead.
func (*Domain) Descriptor() ([]byte, []int) {
	return file_xxddns_proto_rawDescGZIP(), []int{6}
}

func (x *Domain) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Domain) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Domain) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Domain) GetTTL() int32 {
	if x != nil {
		return x.TTL
	}
	return 0
}

func (x *Domain) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Domain) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *Domain) GetSerial() int32 {
	if x != nil {
		return x.Serial
	}
	return 0
}

func (x *Domain) GetRefresh() int32 {
	if x != nil {
		return x.Refresh
	}
	return 0
}

func (x *Domain) GetRetry() int32 {
	if x != nil {
		return x.Retry
	}
	return 0
}

func (x *Domain) GetExpire() int32 {
	if x != nil {
		return x.Expire
	}
	return 0
}

func (x *Domain) GetMininum() int32 {
	if x != nil {
		return x.Mininum
	}
	return 0
}

func (x *Domain) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Domain) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

var File_xxddns_proto protoreflect.FileDescriptor

var file_xxddns_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x78, 0x78, 0x64, 0x64, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x79,
	0x0a, 0x04, 0x41, 0x43, 0x4c, 0x53, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x49, 0x53, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x49,
	0x53, 0x50, 0x12, 0x15, 0x0a, 0x03, 0x49, 0x50, 0x53, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x03, 0x2e, 0x49, 0x50, 0x52, 0x03, 0x49, 0x50, 0x53, 0x22, 0x8a, 0x01, 0x0a, 0x02, 0x49, 0x50,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x43, 0x49, 0x44, 0x52, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x43, 0x49, 0x44, 0x52, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x53,
	0x50, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x49, 0x53, 0x50, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x25, 0x0a, 0x09, 0x49, 0x73, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x46,
	0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x22, 0x50, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x06, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x07, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x56,
	0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x54, 0x4c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x54, 0x54, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb8, 0x02, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x54, 0x4c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x54, 0x54, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x74, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x32, 0x5a, 0x0a, 0x09, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2a, 0x0a,
	0x0f, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x0b, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0a, 0x2e,
	0x49, 0x73, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x46, 0x6c, 0x75,
	0x73, 0x68, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x05, 0x2e, 0x41, 0x43, 0x4c, 0x53,
	0x1a, 0x0a, 0x2e, 0x49, 0x73, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x42, 0x0d, 0x5a, 0x0b,
	0x2e, 0x2f, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_xxddns_proto_rawDescOnce sync.Once
	file_xxddns_proto_rawDescData = file_xxddns_proto_rawDesc
)

func file_xxddns_proto_rawDescGZIP() []byte {
	file_xxddns_proto_rawDescOnce.Do(func() {
		file_xxddns_proto_rawDescData = protoimpl.X.CompressGZIP(file_xxddns_proto_rawDescData)
	})
	return file_xxddns_proto_rawDescData
}

var file_xxddns_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_xxddns_proto_goTypes = []interface{}{
	(*ACLS)(nil),       // 0: ACLS
	(*IP)(nil),         // 1: IP
	(*Empty)(nil),      // 2: Empty
	(*IsFlushed)(nil),  // 3: IsFlushed
	(*DomainData)(nil), // 4: DomainData
	(*Record)(nil),     // 5: Record
	(*Domain)(nil),     // 6: Domain
}
var file_xxddns_proto_depIdxs = []int32{
	1, // 0: ACLS.IPS:type_name -> IP
	6, // 1: DomainData.Domain:type_name -> Domain
	5, // 2: DomainData.Records:type_name -> Record
	4, // 3: FlushFile.FlushDomainFile:input_type -> DomainData
	0, // 4: FlushFile.FlushAclFile:input_type -> ACLS
	3, // 5: FlushFile.FlushDomainFile:output_type -> IsFlushed
	3, // 6: FlushFile.FlushAclFile:output_type -> IsFlushed
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_xxddns_proto_init() }
func file_xxddns_proto_init() {
	if File_xxddns_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_xxddns_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACLS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xxddns_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xxddns_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xxddns_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsFlushed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xxddns_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xxddns_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xxddns_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Domain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_xxddns_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_xxddns_proto_goTypes,
		DependencyIndexes: file_xxddns_proto_depIdxs,
		MessageInfos:      file_xxddns_proto_msgTypes,
	}.Build()
	File_xxddns_proto = out.File
	file_xxddns_proto_rawDesc = nil
	file_xxddns_proto_goTypes = nil
	file_xxddns_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FlushFileClient is the client API for FlushFile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlushFileClient interface {
	FlushDomainFile(ctx context.Context, in *DomainData, opts ...grpc.CallOption) (*IsFlushed, error)
	FlushAclFile(ctx context.Context, in *ACLS, opts ...grpc.CallOption) (*IsFlushed, error)
}

type flushFileClient struct {
	cc grpc.ClientConnInterface
}

func NewFlushFileClient(cc grpc.ClientConnInterface) FlushFileClient {
	return &flushFileClient{cc}
}

func (c *flushFileClient) FlushDomainFile(ctx context.Context, in *DomainData, opts ...grpc.CallOption) (*IsFlushed, error) {
	out := new(IsFlushed)
	err := c.cc.Invoke(ctx, "/FlushFile/FlushDomainFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flushFileClient) FlushAclFile(ctx context.Context, in *ACLS, opts ...grpc.CallOption) (*IsFlushed, error) {
	out := new(IsFlushed)
	err := c.cc.Invoke(ctx, "/FlushFile/FlushAclFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlushFileServer is the server API for FlushFile service.
type FlushFileServer interface {
	FlushDomainFile(context.Context, *DomainData) (*IsFlushed, error)
	FlushAclFile(context.Context, *ACLS) (*IsFlushed, error)
}

// UnimplementedFlushFileServer can be embedded to have forward compatible implementations.
type UnimplementedFlushFileServer struct {
}

func (*UnimplementedFlushFileServer) FlushDomainFile(context.Context, *DomainData) (*IsFlushed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushDomainFile not implemented")
}
func (*UnimplementedFlushFileServer) FlushAclFile(context.Context, *ACLS) (*IsFlushed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushAclFile not implemented")
}

func RegisterFlushFileServer(s *grpc.Server, srv FlushFileServer) {
	s.RegisterService(&_FlushFile_serviceDesc, srv)
}

func _FlushFile_FlushDomainFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlushFileServer).FlushDomainFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FlushFile/FlushDomainFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlushFileServer).FlushDomainFile(ctx, req.(*DomainData))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlushFile_FlushAclFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACLS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlushFileServer).FlushAclFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FlushFile/FlushAclFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlushFileServer).FlushAclFile(ctx, req.(*ACLS))
	}
	return interceptor(ctx, in, info, handler)
}

var _FlushFile_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FlushFile",
	HandlerType: (*FlushFileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FlushDomainFile",
			Handler:    _FlushFile_FlushDomainFile_Handler,
		},
		{
			MethodName: "FlushAclFile",
			Handler:    _FlushFile_FlushAclFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xxddns.proto",
}
